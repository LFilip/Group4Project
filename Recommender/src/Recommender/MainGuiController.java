/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Recommender;

import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.DefaultListModel;

/**
 *
 * @author louis
 */
public class MainGuiController extends javax.swing.JFrame {
    
    /**
     * Creates new form mainGuiController
     */
    private MainGuiController() {
        initComponents();
        UserListManager = UserDatabase.getInstance();
        MediaListManager = MediaDatabase.getInstance();
        changedManually = false;
        PublisherLoggedIn = false;
        isContained = false;
        user = UserListManager.getLoggedInUser();
        dlmLeft = new DefaultListModel();
        dlmRight = new DefaultListModel();
        RightMainList.setModel(dlmRight);
        LeftMainList.setModel(dlmLeft);
    }
    private DefaultListModel dlmLeft;
    private DefaultListModel dlmRight;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainView = new javax.swing.JPanel();
        PublicListView = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        MainDescriptionText = new javax.swing.JTextArea();
        addToMainBTN = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        createNewBTN = new javax.swing.JButton();
        MainSplitPane = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        RightMainList = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        LeftMainList = new javax.swing.JList<>();
        searchField = new javax.swing.JTextField();
        searchBTN = new javax.swing.JButton();
        AddReviewBTN = new javax.swing.JButton();
        AddTagsBTN = new javax.swing.JButton();
        DisplayText = new javax.swing.JLabel();
        viewPublicListBTN = new javax.swing.JButton();
        viewRecommendationsBTN = new javax.swing.JButton();
        removeFromListBTN = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        listMenu = new javax.swing.JMenu();
        publicListMenu = new javax.swing.JMenuItem();
        wishListMenu = new javax.swing.JMenuItem();
        accountMenu = new javax.swing.JMenu();
        logoutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Recommender Main Screen");
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.CardLayout());

        MainView.setLayout(new java.awt.CardLayout());

        PublicListView.setBackground(new java.awt.Color(204, 204, 255));

        MainDescriptionText.setEditable(false);
        MainDescriptionText.setColumns(20);
        MainDescriptionText.setLineWrap(true);
        MainDescriptionText.setRows(5);
        MainDescriptionText.setToolTipText("");
        MainDescriptionText.setWrapStyleWord(true);
        MainDescriptionText.setAutoscrolls(false);
        MainDescriptionText.setOpaque(false);
        jScrollPane3.setViewportView(MainDescriptionText);

        addToMainBTN.setText("Add to My list");
        addToMainBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToMainBTNActionPerformed(evt);
            }
        });

        jLabel3.setText("Your List");

        jLabel4.setText("Details:");

        createNewBTN.setText("Create new Media");
        createNewBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewBTNActionPerformed(evt);
            }
        });

        MainSplitPane.setDividerLocation(150);

        RightMainList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                RightMainListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(RightMainList);

        MainSplitPane.setRightComponent(jScrollPane2);

        LeftMainList.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        LeftMainList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                LeftMainListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(LeftMainList);

        MainSplitPane.setLeftComponent(jScrollPane1);

        searchBTN.setText("Title search");
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });

        AddReviewBTN.setText("Add Review");
        AddReviewBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddReviewBTNActionPerformed(evt);
            }
        });

        AddTagsBTN.setText("Add Tags");
        AddTagsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTagsBTNActionPerformed(evt);
            }
        });

        viewPublicListBTN.setText("View Public List");
        viewPublicListBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPublicListBTNActionPerformed(evt);
            }
        });

        viewRecommendationsBTN.setText("View Recommendations");
        viewRecommendationsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRecommendationsBTNActionPerformed(evt);
            }
        });

        removeFromListBTN.setText("Remove from My list");
        removeFromListBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromListBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PublicListViewLayout = new javax.swing.GroupLayout(PublicListView);
        PublicListView.setLayout(PublicListViewLayout);
        PublicListViewLayout.setHorizontalGroup(
            PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PublicListViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(createNewBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addToMainBTN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddReviewBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddTagsBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeFromListBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PublicListViewLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DisplayText, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 792, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(PublicListViewLayout.createSequentialGroup()
                .addGroup(PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(searchBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField))
                .addGroup(PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PublicListViewLayout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel3)
                        .addGap(202, 202, 202)
                        .addComponent(viewPublicListBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewRecommendationsBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PublicListViewLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(MainSplitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        PublicListViewLayout.setVerticalGroup(
            PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PublicListViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PublicListViewLayout.createSequentialGroup()
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchBTN))
                    .addGroup(PublicListViewLayout.createSequentialGroup()
                        .addGroup(PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(viewPublicListBTN)
                                .addComponent(viewRecommendationsBTN))
                            .addComponent(jLabel3))
                        .addGap(19, 19, 19)
                        .addComponent(MainSplitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DisplayText))))
                .addGap(2, 2, 2)
                .addGroup(PublicListViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PublicListViewLayout.createSequentialGroup()
                        .addComponent(AddTagsBTN)
                        .addGap(12, 12, 12)
                        .addComponent(addToMainBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeFromListBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AddReviewBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createNewBTN)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );

        MainView.add(PublicListView, "card2");

        getContentPane().add(MainView, "card2");

        menuBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        menuBar.setForeground(new java.awt.Color(255, 255, 255));

        listMenu.setText("Lists");
        listMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listMenuActionPerformed(evt);
            }
        });

        publicListMenu.setText("View Public List");
        publicListMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publicListMenuActionPerformed(evt);
            }
        });
        listMenu.add(publicListMenu);

        wishListMenu.setText("View Recommendations");
        wishListMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wishListMenuActionPerformed(evt);
            }
        });
        listMenu.add(wishListMenu);

        menuBar.add(listMenu);

        accountMenu.setText("Account");
        accountMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountMenuActionPerformed(evt);
            }
        });

        logoutMenu.setText("Logout");
        logoutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuActionPerformed(evt);
            }
        });
        accountMenu.add(logoutMenu);

        menuBar.add(accountMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listMenuActionPerformed

    private void publicListMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publicListMenuActionPerformed

    }//GEN-LAST:event_publicListMenuActionPerformed

    
    private void wishListMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wishListMenuActionPerformed

    }//GEN-LAST:event_wishListMenuActionPerformed

    private void createNewBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewBTNActionPerformed
        MainDescriptionText.setText("Use the popup window to create a new media");
        MediaFactoryGui mediaFactoryGui = new MediaFactoryGui();
        mediaFactoryGui.setVisible(true);
        newMedia = mediaFactoryGui.createNewMedia();
    }//GEN-LAST:event_createNewBTNActionPerformed

    private void LeftMainListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_LeftMainListValueChanged
       if(LeftMainList.getModel().getSize() > 0){
       int i = LeftMainList.getSelectedIndex();
       if (i >= 0){
       selectedMedia = user.getUserMediaList().get(i);
       createDescription(selectedMedia);
       MainDescriptionText.setText(mediaDescription);
       MainDescriptionText.setCaretPosition(0);
       }
       else{
      
       }
       }
       else{
       }
    }//GEN-LAST:event_LeftMainListValueChanged

    private void addToMainBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToMainBTNActionPerformed
         ArrayList<Media> userTempArray = user.getUserMediaList(); 
         isContained = false;
        if (userTempArray.size() > 0){
        for (Media media : user.getUserMediaList()){
            if (selectedMedia.getTitle().equals(media.getTitle())){
                isContained = true;
            }
        }
        if (isContained) {
            DisplayText.setText("Well this is already in your list.");
        } else {
        user.addMedia(selectedMedia);
            DisplayText.setText(selectedMedia.getTitle()+ " Added to your list");
        }
        user.updateList(MediaListManager.getMediaList());
        UserListManager.saveUsers();
        }
        else
        {
        user.addMedia(selectedMedia);
        DisplayText.setText(selectedMedia.getTitle()+ " Added to your list");
        user.updateList(MediaListManager.getMediaList());
        UserListManager.saveUsers();
     
        }
        
    }//GEN-LAST:event_addToMainBTNActionPerformed

    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTNActionPerformed
        int i = 0;
        Boolean found = false;
        // searches the public list and displays on right.
        for (Media media : MediaListManager.getMediaList()){
            searchTitle = searchField.getText().toLowerCase();
            if(searchTitle.equals( media.getTitle().toLowerCase())){
                RightMainList.setSelectedIndex(i);
                found = true;
            }
            i++;
        }
        if (!found){
            for (Media media: user.getUserMediaList()){
                if (searchTitle.equals(media.getTitle().toLowerCase())){
                    LeftMainList.setSelectedIndex(i);
                    found = true;
                }
            }
        }
        if (!found){
            DisplayText.setText("Sorry There were no results");
        }
       
    }//GEN-LAST:event_searchBTNActionPerformed

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
/*       if (dlmRight.size() != MediaListManager.getMediaList().size()){
       int i= 1;
       dlmRight.removeAllElements();
        for(Media media: MediaListManager.getMediaList()){
            dlmRight.addElement(i + ": " +media.getTitle());
            i++;
        }   
        RightMainList.setModel(dlmRight);
        }
 */       user = UserListManager.getLoggedInUser();
       if (dlmLeft.size() != user.getUserMediaList().size()){
          int i = 1;
                 dlmLeft.removeAllElements();
        for(Media media: user.getUserMediaList()){
            dlmLeft.addElement(i + ": " +media.getTitle());
            i++;
        }   
        LeftMainList.setModel(dlmLeft);
  
     }
    }//GEN-LAST:event_formMouseEntered

    private void RightMainListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_RightMainListValueChanged
       if(!changedManually){
        int i = RightMainList.getSelectedIndex();
        if(i > RightArrayList.size() || i < 0){
            MainDescriptionText.setText("Please Choose a Media to View");
        } else{
       selectedMedia = RightArrayList.get(i);
       createDescription(selectedMedia);
        MainDescriptionText.setText(mediaDescription);
        MainDescriptionText.setCaretPosition(0);
       }
       }
       changedManually = false;
    }//GEN-LAST:event_RightMainListValueChanged

    
    
    private void AddReviewBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddReviewBTNActionPerformed
        AddReviewGui addReviewGui = new AddReviewGui(selectedMedia);
        addReviewGui.setVisible(true);
        MediaListManager.saveList();
    }//GEN-LAST:event_AddReviewBTNActionPerformed

    
    
    private void viewPublicListBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPublicListBTNActionPerformed
        changedManually = true;
        RightMainList.clearSelection();
        setRightList(MediaListManager.getMediaList());
        

    }//GEN-LAST:event_viewPublicListBTNActionPerformed

    
    
    private void viewRecommendationsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRecommendationsBTNActionPerformed
        changedManually = true;
        RightMainList.clearSelection();
        userPreferenceList = user.generateTopTags();
        recommendationList = MediaListManager.getListByTags(userPreferenceList);
        ArrayList<Media> tempList = new ArrayList<>();
        for (Media media : user.getUserMediaList()){
            for (Media recommendedMedia: recommendationList){
                if (media.getTitle().equals(recommendedMedia.getTitle())){
                    tempList.add(recommendedMedia);
                }
            }
        }
        System.out.println(recommendationList);
        recommendationList.removeAll(tempList);
        if (recommendationList.isEmpty()){
            setRightList("Sorry add more media.");
        }else {
            setRightList(recommendationList);
        }
        changedManually = false;
    }//GEN-LAST:event_viewRecommendationsBTNActionPerformed

    
    
    private void AddTagsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTagsBTNActionPerformed
        if (selectedMedia != null){
        AddTagsGui addTagsGui = new AddTagsGui(selectedMedia);
        addTagsGui.setVisible(true);
        MediaListManager.saveList();
        }
    }//GEN-LAST:event_AddTagsBTNActionPerformed

    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
       if (dlmRight.size() != MediaListManager.getMediaList().size()){
            setRightList(MediaListManager.getMediaList());
       }
       user = UserListManager.getLoggedInUser();
       if (dlmLeft.size() != user.getUserMediaList().size()){
           
          int i = 1;
                 dlmLeft.removeAllElements();
        for(Media media: user.getUserMediaList()){
            dlmLeft.addElement(i + ": " +media.getTitle());
            i++;
        }   
        LeftMainList.setModel(dlmLeft);
       }
    }//GEN-LAST:event_formWindowOpened

    
    
    private void removeFromListBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFromListBTNActionPerformed
        // TODO this is not removing correctly now i need to repaint the list to make it show back up.

        isContained = false;
        for (Media media : user.getUserMediaList()){
            if (selectedMedia.getTitle().equals(media.getTitle())){
                isContained = true;
               
            }
        }
        if (isContained){
            user.removeMedia(selectedMedia);
            updateLeftList();
        }
    }//GEN-LAST:event_removeFromListBTNActionPerformed

    private void accountMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountMenuActionPerformed
         // This function does Nothing
    }//GEN-LAST:event_accountMenuActionPerformed

    /*
    *
    */
    private void logoutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuActionPerformed
        LoginGuiController loginGui;
        loginGui = new LoginGuiController();
        loginGui.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_logoutMenuActionPerformed

    private void updateLeftList(){
           int i = 1;
           dlmLeft.removeAllElements();
           for (Media media: user.getUserMediaList()){
               dlmLeft.addElement(i +": " + media.getTitle());
               i++;
           }
    }
    /**
     * This opens the main frame to the main view.  used by other functions to make this frame active
     */
    
    private void setRightList(ArrayList<Media> newList){
        RightArrayList = newList;
        dlmRight.removeAllElements();
        int i = 1;
        for (Media media : newList){
            dlmRight.addElement(i + " : " + media.getTitle() + "     By:       " + media.getAuthor() + "       Rating:     " + media.getRating());
        i++;
        }
    }
    
    private void setRightList(String sorry_Add_more_media) {
        dlmRight.removeAllElements();
        dlmRight.addElement(sorry_Add_more_media);
    }

    
    public void openMyList() {
        this.setVisible(true);
        MainView.removeAll();
        MainView.add(PublicListView);
        MainView.revalidate();
        MainView.repaint();

    }
    
    /**
     *
     * @return returns the instance of this class that it created at the beginning
     */
    public static MainGuiController getInstance(){
        if (mainGuiController == null){
            mainGuiController = new MainGuiController();
        }
        return mainGuiController;
    }
    
    private void createDescription(Media media){
      if (media != null){
        mediaDescription = "Title: " + media.getTitle() + "\n" + 
                           "Author: " + media.getAuthor() + "\n" +
                           "Published in: " + media.getYearPublished() + "\n" +
                           "Published by: " + media.getPublisher() + "\n" +
                           "Genre: " + media.getGenre() + "\n" +
                           "Stars out of 5: " + media.getRating() + "\n" +
                "============================================================\n"; 
                           
       for(String newString: media.getReviews()){
           mediaDescription += " " + newString + "\n"
                   + "==================================================================\n";
       }
       
      }
      else {
          mediaDescription = "Click on something";
      }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGuiController().setVisible(true);
            }
        });
    }
    
    ArrayList<Media> RightArrayList;
    Boolean changedManually;
    Boolean isContained;
    Boolean PublisherLoggedIn;
    String searchTitle;
    String mediaDescription;
    private Media newMedia;
    private Media selectedMedia;
    private LoginGuiController loginGuiController;
    private static MainGuiController mainGuiController;
    ArrayList<Media> publicMediaList;
    private static MediaDatabase myDatabase;
    private ArrayList<Media> recommendationList;
    private ArrayList<String> userPreferenceList;
    private final MediaDatabase MediaListManager;
    private final UserDatabase UserListManager;
    private final Scanner scanner = new Scanner(System.in);
    private int menuControlInt;
    private User user;    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddReviewBTN;
    private javax.swing.JButton AddTagsBTN;
    private javax.swing.JLabel DisplayText;
    private javax.swing.JList<String> LeftMainList;
    private javax.swing.JTextArea MainDescriptionText;
    private javax.swing.JSplitPane MainSplitPane;
    private javax.swing.JPanel MainView;
    private javax.swing.JPanel PublicListView;
    private javax.swing.JList<String> RightMainList;
    private javax.swing.JMenu accountMenu;
    private javax.swing.JButton addToMainBTN;
    private javax.swing.JButton createNewBTN;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenu listMenu;
    private javax.swing.JMenuItem logoutMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem publicListMenu;
    private javax.swing.JButton removeFromListBTN;
    private javax.swing.JButton searchBTN;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton viewPublicListBTN;
    private javax.swing.JButton viewRecommendationsBTN;
    private javax.swing.JMenuItem wishListMenu;
    // End of variables declaration//GEN-END:variables





}
